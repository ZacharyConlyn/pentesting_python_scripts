#!/usr/bin/env python3

import zipfile
import itertools
from datetime import datetime
import argparse
from helper_functions import lazy_load

# constants you can change
PASS_CHUNK_SIZE = 2500 # group of passwords sent out to threads at a time

def extract_file(pw: str, zip_file: zipfile.ZipFile) -> None:
    try:
        zip_file.extractall(pwd=pw.encode())
    except (RuntimeError, zipfile.BadZipFile):  # bad password
        return False
    return True


def main():
    parser = argparse.ArgumentParser()
    optional = parser._action_groups.pop()
    required = parser.add_argument_group("required arguments")
    optional = parser.add_argument_group("optional arguments")
    required.add_argument("-z", "--zipfile", type=str, help="file to unzip", required=True)
    required.add_argument("-d", "--dictionary", type=str, help="dictionary file to use", required=True)
    args = parser.parse_args()
    try:
        zip_file = zipfile.ZipFile(args.zipfile)
    except FileNotFoundError as err:
        print(f"\n[-] {err}")
        exit(-1)
    start_time = datetime.now()
    passwords_tried = 0
    try:
        with open(args.dictionary, "r", errors="ignore") as dict_file:
            generator = lazy_load(dict_file)
            for i, word in enumerate(generator, start=1):
                result = extract_file(word, zip_file)
                if result:
                    elapsed_time = (datetime.now() - start_time)
                    hours, minutes, seconds = str(elapsed_time).split(":")
                    hours = str(int(hours))
                    minutes = str(int(minutes))
                    seconds = str(round(float(seconds)))
                    print(f"\n[+] Password '{word}' found in {i} tries, "
                          f"{hours} hours, {minutes} minutes, and {seconds} seconds.")
                    exit(0)
                if i % 5000 == 0:
                    delta = datetime.now() - start_time
                    elapsed_seconds = delta.total_seconds()
                    print(f"\r[*] {i} passwords tried in {round(elapsed_seconds)} "
                    f"seconds (avg {round(i/elapsed_seconds)}/sec)", end="")

        print(f"\n[-] Correct password not found in dictionary file ({i} tries total).")
        exit(-1)
    except FileNotFoundError as err:
        print(f"\n[-] {err}")
        exit(-1)


if __name__ == "__main__":
    main()
