#!/usr/bin/env python3

import zipfile
import itertools
from concurrent.futures import ThreadPoolExecutor
from datetime import datetime
import argparse
from helper_functions import lazy_load

# constants you can change
MAX_WORKERS = 4
PASS_CHUNK_SIZE = 2500 # group of passwords sent out to threads at a time

# globals you shouldn't change
password = None
passwords_tried = 0


def extract_file(pw: str, zip_file: zipfile.ZipFile) -> None:
    global password
    global passwords_tried
    if password:
        return
    pw = pw.strip("\n")
    try:
        passwords_tried += 1
        zip_file.extractall(pwd=pw.encode())
    except (RuntimeError, zipfile.BadZipFile):  # bad password
        return
    print(f"\n[+] Found password: {pw}")
    password = pw


def main():
    global passwords_tried
    global password
    parser = argparse.ArgumentParser()
    optional = parser._action_groups.pop()
    required = parser.add_argument_group("required arguments")
    optional = parser.add_argument_group("optional arguments")
    required.add_argument("-z", "--zipfile", type=str, help="file to unzip", required=True)
    required.add_argument("-d", "--dictionary", type=str, help="dictionary file to use", required=True)
    args = parser.parse_args()
    try:
        zip_file = zipfile.ZipFile(args.zipfile)
    except FileNotFoundError as err:
        print(f"\n[-] {err}")
        exit(-1)
    start_time = datetime.now()
    try:
        with open(args.dictionary, "r", errors="ignore") as dict_file:
            generator = lazy_load(dict_file)
            next_list = [word for word in itertools.islice(generator, PASS_CHUNK_SIZE)]
            while next_list:
                with ThreadPoolExecutor(max_workers=MAX_WORKERS) as tp_exec:
                    for pw in next_list:
                        if password:
                            elapsed_time = (datetime.now() - start_time)
                            hours, minutes, seconds = str(elapsed_time).split(":")
                            hours = str(int(hours))
                            minutes = str(int(minutes))
                            seconds = str(round(float(seconds)))
                            print(f"[+] Password '{password}' found in {passwords_tried} tries, "
                                  f"{hours} hours, {minutes} minutes, and {seconds} seconds.")
                            exit(0)
                        tp_exec.submit(extract_file, pw, zip_file)
                    tp_exec.shutdown(wait=True)
                if password is None:
                    next_list = [pw for pw in itertools.islice(generator, PASS_CHUNK_SIZE)]
                    print(f"\r[*] Passwords tried: {passwords_tried}", end="")

        print(f"\n[-] Correct password not found.")
    except FileNotFoundError as err:
        print(f"\n[-] {err}")


if __name__ == "__main__":
    main()
