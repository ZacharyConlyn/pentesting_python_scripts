#!/usr/bin/env python3

# This version is improved from the book's.
# It can be fed an /etc/shadow file from a
# modern Linux distro. Tested on Ubuntu 16.04.

import crypt

def test_pass(crypt_pass: str) -> None:
    """Takes a password field from e.g. an /etc/shadow file and attempts to crack it
    By comparing it with hashes from a dictionary file."""

    split_pass = crypt_pass.split("$")
    if len(split_pass) != 4:
        print("[-] Format of password field is weird.")
        return
    salt = "$".join(split_pass[:3])
    try:
        with open("dictionary.txt", "r") as dict_file:
            for word in dict_file.readlines():
                word = word.strip("\n")
                crypt_word = crypt.crypt(word, salt)
                if crypt_word == crypt_pass:
                    print(f"[+] Found Password: {word}")
                    return
    except FileNotFoundError as err:
        print(f"[-] {err}")
    print("[-] Passowrd not found.")
    return


def main():
    """Runs test_pass against an /etc/shadow-formatted file called passwords.txt"""
    try:
        with open("passwords.txt") as pass_file:
            for line in pass_file.readlines():
                if ":" in line:
                    user = line.split(":")[0]
                    crypt_pass = line.split(":")[1].strip(" ")
                    print(f"[*] Cracking password for: {user}")
                    test_pass(crypt_pass)
                else:
                    print("[-] No ':' found in line; are you sure this is the right file?")
    except FileNotFoundError as err:
        print(f"[-] {err}")


if __name__ == "__main__":
    main()
